---

- name: Trusted Host Settings
  blockinfile:
    state: present
    block: |
      $settings['trusted_host_patterns'] = array(
      {% for host in drupal_trusted_hosts %}
        '{{ host }}',
      {% endfor %}
      );
      $settings['flysystem'] = [
        'fedora' => [
          'driver' => 'fedora',
          'config' => [
            'root' => 'http://localhost:8080/fcrepo/rest/',
          ],
        ],
      ];
    path: "{{ drupal_trusted_hosts_file }}"
    marker: // {mark} ANSIBLE MANAGED BLOCK

- name: Uninstall core search module
  command: "{{ drush_path }} --root {{ drupal_core_path }} -y pm-uninstall search"
  register: uninstall_search
  changed_when: "'successfully uninstalled' in uninstall_search.stdout"

- name: Get Carapace status
  command: "{{ drush_path }} --root {{ drupal_core_path }} pm-list --format=json"
  register: carapace_enabled
  changed_when: false

- name: Enable Carapace if not enabled
  command: "{{ drush_path }} --root {{ drupal_core_path }} then -y carapace"
  when: ((carapace_enabled.stdout|from_json).carapace.status|lower) != 'enabled'

- name: Test if theme is Carapace
  command: "{{ drush_path }} --root {{ drupal_core_path }} -y config-get system.theme default"
  register: drupal_theme_carapace
  changed_when: false
  check_mode: no

- name: Set theme to carapace
  command: "{{ drush_path }} --root {{ drupal_core_path }} -y config-set system.theme default carapace"
  when: "'carapace' not in drupal_theme_carapace.stdout"

- name: Set permissions on the public files directory
  file:
    recurse: yes
    state: directory
    path: "{{ drupal_public_filesystem }}"
    owner: "{{ webserver_app_user }}"
    group: "{{ webserver_app_user }}"

- name: Create drupal configs directory.
  file:
    state: directory
    path: "{{ webserver_app_drupal_config_path }}"
    owner: "{{ webserver_app_user }}"
    group: "{{ webserver_app_user }}"

- name: Set default solr server to point to CLAW core
  command: "{{ drush_path }} --root {{ drupal_core_path }} -y config-set search_api.server.default_solr_server backend_config.connector_config.core CLAW"
  register: set_search_api_config
  changed_when: "'Do you want to update' in set_search_api_config.stdout"

- name: Get solr config files to copy
  command: "find {{ webserver_document_root }}/drupal/web/modules/contrib/search_api_solr/solr-conf/6.x -type f"
  register: files_to_copy
  changed_when: false

- name: Copy solr config files
  copy:
    src: "{{ item }}"
    dest: "{{ solr_instance_conf_path }}"
    owner: "{{ solr_user }}"
    group: "{{ solr_user }}"
    remote_src: True
  with_items:
   - "{{ files_to_copy.stdout_lines }}"
  notify: restart solr

- name: Import features
  command: "{{ drush_path }} --root {{ drupal_core_path }} -y fim islandora_core_feature,controlled_access_terms_default_configuration"

# masonry library is required by content_browser and not installed by composer due to issue 2971165.
- name: Create drupal library directory.
  file:
    state: directory
    path: "{{ drupal_external_libraries_directory }}"
    owner: "{{ webserver_app_user }}"
    group: "{{ webserver_app_user }}"

#- name: Unarchive masonry library.
#  unarchive:
#    src: "https://github.com/desandro/masonry/archive/v3.3.2.zip"
#    dest: "{{ drupal_external_libraries_directory }}"
#    creates: "{{ drupal_external_libraries_directory }}/masonry"
#    remote_src: yes

- name: Unarchive masonry library. get_url
  get_url:
    url: "https://github.com/desandro/masonry/archive/v3.3.2.zip"
    dest: "/tmp/masonry-v3.3.2.zip"

- name: Unarchive masonry library.
  unarchive:
    src: "/tmp/masonry-v3.3.2.zip"
    dest: "{{ drupal_external_libraries_directory }}"
    creates: "{{ drupal_external_libraries_directory }}/masonry"
    remote_src: yes

- name: Rename masonry directory.
  command: mv "{{ drupal_external_libraries_directory }}/masonry-3.3.2" "{{ drupal_external_libraries_directory }}/masonry"
  args:
    creates: "{{ drupal_external_libraries_directory }}/masonry"

# Set Matomo Settings
- name: Set Matomo site id.
  command: "{{ drush_path }} --root {{ drupal_core_path }} -y config-set matomo.settings site_id 1"
  register: set_search_api_config
  changed_when: "'Do you want to update site_id' in set_search_api_config.stdout"

- name: Set Matmo sever url.
  command: "{{ drush_path }} --root {{ drupal_core_path }} -y config-set matomo.settings url_http http://localhost:8000/matomo/"
  register: set_search_api_config
  changed_when: "'Do you want to update site_id' in set_search_api_config.stdout"

# pdf.js library
- name: ensure pdf.js directory exists
  file:
    path: "{{ drupal_external_libraries_directory }}/pdf.js"
    state: directory

#- name: Unarchive pdf.js library
#  unarchive:
#    src: "https://github.com/mozilla/pdf.js/releases/download/v2.0.943/pdfjs-2.0.943-dist.zip"
#    dest: "{{ drupal_external_libraries_directory }}/pdf.js"
#    creates: "{{ drupal_external_libraries_directory }}/pdf.js/build"
#    remote_src: yes


- name: Unarchive pdf.js library get_url
  unarchive:
    url: "https://github.com/mozilla/pdf.js/releases/download/v2.0.943/pdfjs-2.0.943-dist.zip"
    dest: "/tmp/pdfjs-2.0.943-dist.zip"

- name: Unarchive pdf.js library
  unarchive:
    src: "/tmp/pdfjs-2.0.943-dist.zip"
    dest: "{{ drupal_external_libraries_directory }}/pdf.js"
    creates: "{{ drupal_external_libraries_directory }}/pdf.js/build"
    remote_src: yes
