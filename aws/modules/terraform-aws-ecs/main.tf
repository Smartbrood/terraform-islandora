resource "aws_ecs_cluster" "this" {
    name = "${var.environment}-${var.pet_name}"
}

data "template_file" "user_data_public" {
  template = "${file("${path.module}/templates/user_data.sh.tpl")}"

  vars {
    cluster_name = "${var.environment}-${var.pet_name}"
    frontend     = "true"
    application  = "true"
    database     = "true"
    spot         = "false"    
  }
}

module "ecs_ami" {
    source       = "../terraform-aws-data-ami"
    distribution = "ecs"
}

module "ec2_iam_role" {
    source                = "../terraform-aws-ec2-iam-role"
    name                  = "${var.environment}-${var.pet_name}"
    path                  = "/"
    description           = "This IAM Role generated by Terraform."
    force_detach_policies = false

    policy_arn = [
        "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
    ]
}

module "ecs_public_a" {
    source               = "../terraform-aws-ec2-instance"
    name                 = "${var.environment}-${var.pet_name}-a"
    count                = "${var.count_public_a}" 
    instance_type        = "${var.instance_type}"
    key_name             = "${var.key_name}"
    subnet_id            = "${var.subnet_public_zone_a}"

    ami                  = "${var.ami_update ? module.ecs_ami.ami_id : var.ami }"
    iam_instance_profile = "${module.ec2_iam_role.profile_name}"
    vpc_security_group_ids      = ["${var.security_group}"]

    associate_public_ip_address = true
    monitoring                  = false

    root_block_device      = [{ delete_on_termination = false }]
    ebs_block_device       = [{ delete_on_termination = false 
                                device_name = "/dev/xvdcz"
                              }]

    user_data            = "${data.template_file.user_data_public.rendered}"

    tags = "${merge(var.tags, map("Name", "${var.environment}-${var.pet_name}-a"))}" 
}

module "ecs_public_b" {
    source               = "../terraform-aws-ec2-instance"
    name                 = "${var.environment}-${var.pet_name}-b"
    count                = "${var.count_public_b}" 
    instance_type        = "${var.instance_type}"
    key_name             = "${var.key_name}"
    subnet_id            = "${var.subnet_public_zone_b}"

    ami                  = "${var.ami_update ? module.ecs_ami.ami_id : var.ami }"
    iam_instance_profile = "${module.ec2_iam_role.profile_name}"
    vpc_security_group_ids      = ["${var.security_group}"]

    associate_public_ip_address = true
    monitoring                  = false

    root_block_device      = [{ delete_on_termination = false }]
    ebs_block_device       = [{ delete_on_termination = false 
                                device_name = "/dev/xvdcz"
                              }]

    user_data            = "${data.template_file.user_data_public.rendered}"

    tags = "${merge(var.tags, map("Name", "${var.environment}-${var.pet_name}-b"))}" 
}

module "ecs_public_c" {
    source               = "../terraform-aws-ec2-instance"
    name                 = "${var.environment}-${var.pet_name}-c"
    count                = "${var.count_public_c}" 
    instance_type        = "${var.instance_type}"
    key_name             = "${var.key_name}"
    subnet_id            = "${var.subnet_public_zone_c}"

    ami                  = "${var.ami_update ? module.ecs_ami.ami_id : var.ami }"
    iam_instance_profile = "${module.ec2_iam_role.profile_name}"
    vpc_security_group_ids      = ["${var.security_group}"]

    associate_public_ip_address = true
    monitoring                  = false

    root_block_device      = [{ delete_on_termination = false }]
    ebs_block_device       = [{ delete_on_termination = false 
                                device_name = "/dev/xvdcz"
                              }]

    user_data            = "${data.template_file.user_data_public.rendered}"

    tags = "${merge(var.tags, map("Name", "${var.environment}-${var.pet_name}-c"))}" 
}


data "null_data_source" "values" {
  inputs = {
    zone_a_public_ip  = "${join(",", module.ecs_public_a.public_ip)}"
    zone_b_public_ip  = "${join(",", module.ecs_public_b.public_ip)}"
    zone_c_public_ip  = "${join(",", module.ecs_public_c.public_ip)}"
    zone_a_public_ip_private  = "${join(",", module.ecs_public_a.private_ip)}"
    zone_b_public_ip_private  = "${join(",", module.ecs_public_b.private_ip)}"
    zone_c_public_ip_private  = "${join(",", module.ecs_public_c.private_ip)}"
  }
}
